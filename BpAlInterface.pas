unit BpAlInterface;

// Oracle Package Wizard 1.0.3
// File BpAlInterface.pas generated by tseit on 07.02.03 12:14:49
// This unit contains interface objects for oracle package OLAP.BP_AL_INTERFACE
// WARNING: Modifications made to this file will be lost after regeneration!

interface

uses Classes, SysUtils, Oracle;

type
(*
package bp_al_interface is
   ---
   --- добавление формулы
   ---
   function AddFormula( sFormulaName in varChar2, sFormula in varChar2) return number;
   ---
   --- редактирование формулы
   ---
   function EditFormula( nClass in number, sFormula in varChar2) return varChar2;
   ---
   --- удаление формулы
   ---
   function DeleteFormula( idFormula in number) return varChar2;
   ---
   --- удаление формулы из библиотек
   ---
   function DeleteFormulaAnyWay( idFormula in number) return varChar2;
   ---
   --- добавление формулы в библиотеку
   ---
   function AddFormula2Library( idFormula in number, idLibrary in number) return varChar2;
   ---
   --- изменение знака в наборе
   ---
   function ChangeFormulaOperation( AIDFormula in number, AIDLibrary in number,
     AOperation in varChar2) return varChar2;
   ---
   --- удаление формулы в библиотеку
   ---
   function DeleteFormulaFromLibrary( idFormula in number, idLibrary in number) return varChar2;
   ---
   --- добавление новой библиотеки
   ---
   function AddLibrary( sLibraryName in varChar2) return number;
   ---
   --- изменение названия библиотеки
   ---
   function EditLibrary( nClass in number, sLibraryName in varChar2) return varChar2;
   ---
   --- изменение удаление библиотеки
   ---
   function DeleteLibrary( nClass in number) return varChar2;


   ---
   --- добавление задачи
   ---
   function AddReport( nTaskType in number, sLabel in varChar2) return number;
   ---
   --- редактирование названия отчета
   ---
   function EditReport( nTaskClass in number, sLabel in varChar2) return varChar2;
   ---
   --- удаление задачи
   ---
   function DeleteReport( nTaskClass in number) return varChar2;
   ---
   --- добавление библиотеки в задачу
   ---
   function AddLibrary2Job( nTaskClass in number, nLibClass in number, nOrder in number)
     return varChar2;

   ---
   --- удаление библиотек из задачи
   ---
   function DeleteLibrarysFromJob( nTaskClass in number) return varChar2;


   ---
   --- добавление таблицы
   ---
   function AddTableDesc( sTableName in varChar2, sTableDesc in varChar2) return number;

   ---
   --- добавление колонки к таблице
   ---
   function AddColumn2Table( nIdTable in number, sColumnName in varChar2,
      sColumnLabel in varChar2, sColumnDesc in varChar2, nColumnType in number) return number;
   ---
   --- удаление колонки
   ---
   function DeleteColumn( nColumnClass in number) return varChar2;

   ---
   --- разбиение строки по морфемам
   ---
   type TVarchar2Table is table of varChar2( 4000) index by binary_integer;
   procedure Tokenize( S in varChar2, sDelim in varChar2, ATable in out TVarChar2Table);

   ---
   --- получение имен столбцов по их идентификаторам
   ---
   procedure TranslateColumnList(
     sTableName in varChar2,
     ATable in TVarchar2Table,
     AColumnNameTable in out TVarchar2Table, nColumnType in number);


   ---
   --- добавление нового типа атрибута
   ---
   function addtaskattrType( nClass in number, sLabel in varChar2) return varChar2;
   ---
   --- удаление всех атрибутов отчета
   ---
   function DeleteTaskAttrs( nTaskClass in number) return varChar2;
   ---
   --- добавление нового атрибута в отчет
   ---
   function AddTaskAttr( nTaskClass in number, nTaskAttrType in number, naOrder in number,
      nObj in number, sValue in varChar2, sCompareWith  in varChar2) return varChar2;

end;
*)
  TBpAlInterface = class(TOracleCustomPackage)
  public
    function  Addcolumn2table(ANidtable: Double; 
      const AScolumnname: string; const AScolumnlabel: string; 
      const AScolumndesc: string; ANcolumntype: Double): Double;
    function  Addformula(const ASformulaname: string; 
      const ASformula: string): Double;
    function  Addformula2library(AIdformula: Double; AIdlibrary: Double): string;
    function  Addlibrary(const ASlibraryname: string): Double;
    function  Addlibrary2job(ANtaskclass: Double; ANlibclass: Double; 
      ANorder: Double): string;
    function  Addreport(ANtasktype: Double; const ASlabel: string): Double;
    function  Addtabledesc(const AStablename: string; 
      const AStabledesc: string): Double;
    function  Addtaskattr(ANtaskclass: Double; ANtaskattrtype: Double; 
      ANaorder: Double; ANobj: Double; const ASvalue: string; 
      const AScomparewith: string): string;
    function  Addtaskattrtype(ANclass: Double; const ASlabel: string): string;
    function  Changeformulaoperation(AAidformula: Double; 
      AAidlibrary: Double; const AAoperation: string): string;
    function  Deletecolumn(ANcolumnclass: Double): string;
    function  Deleteformula(AIdformula: Double): string;
    function  Deleteformulaanyway(AIdformula: Double): string;
    function  Deleteformulafromlibrary(AIdformula: Double; 
      AIdlibrary: Double): string;
    function  Deletelibrary(ANclass: Double): string;
    function  Deletelibrarysfromjob(ANtaskclass: Double): string;
    function  Deletereport(ANtaskclass: Double): string;
    function  Deletetaskattrs(ANtaskclass: Double): string;
    function  Editformula(ANclass: Double; const ASformula: string): string;
    function  Editlibrary(ANclass: Double; const ASlibraryname: string): string;
    function  Editreport(ANtaskclass: Double; const ASlabel: string): string;
    procedure Tokenize(const AS1: string; const ASdelim: string; 
      var AAtable: TPLSQLTable);
    procedure Translatecolumnlist(const AStablename: string; 
      AAtable: TPLSQLTable; var AAcolumnnametable: TPLSQLTable; 
      ANcolumntype: Double);
  published
    property Name;
    property Session;
    property Cursor;
  end;

var
  DefaultPLSQLTableSize: Integer = 100; // Default size of a PL/SQL Table

implementation

// BP_AL_INTERFACE.ADDCOLUMN2TABLE
function TBpAlInterface.Addcolumn2table(ANidtable: Double; 
  const AScolumnname: string; const AScolumnlabel: string; 
  const AScolumndesc: string; ANcolumntype: Double): Double;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otFloat);
  OCPQuery.DeclareVariable('NIDTABLE', otFloat);
  OCPQuery.SetVariable('NIDTABLE', ANidtable);
  OCPQuery.DeclareVariable('SCOLUMNNAME', otString);
  OCPQuery.SetVariable('SCOLUMNNAME', AScolumnname);
  OCPQuery.DeclareVariable('SCOLUMNLABEL', otString);
  OCPQuery.SetVariable('SCOLUMNLABEL', AScolumnlabel);
  OCPQuery.DeclareVariable('SCOLUMNDESC', otString);
  OCPQuery.SetVariable('SCOLUMNDESC', AScolumndesc);
  OCPQuery.DeclareVariable('NCOLUMNTYPE', otFloat);
  OCPQuery.SetVariable('NCOLUMNTYPE', ANcolumntype);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "BP_AL_INTERFACE"."ADDCOLUMN2TABLE"(');
  OCPQuery.SQL.Add('    NIDTABLE => :NIDTABLE,');
  OCPQuery.SQL.Add('    SCOLUMNNAME => :SCOLUMNNAME,');
  OCPQuery.SQL.Add('    SCOLUMNLABEL => :SCOLUMNLABEL,');
  OCPQuery.SQL.Add('    SCOLUMNDESC => :SCOLUMNDESC,');
  OCPQuery.SQL.Add('    NCOLUMNTYPE => :NCOLUMNTYPE);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// BP_AL_INTERFACE.ADDFORMULA
function TBpAlInterface.Addformula(const ASformulaname: string; 
  const ASformula: string): Double;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otFloat);
  OCPQuery.DeclareVariable('SFORMULANAME', otString);
  OCPQuery.SetVariable('SFORMULANAME', ASformulaname);
  OCPQuery.DeclareVariable('SFORMULA', otString);
  OCPQuery.SetVariable('SFORMULA', ASformula);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "BP_AL_INTERFACE"."ADDFORMULA"(');
  OCPQuery.SQL.Add('    SFORMULANAME => :SFORMULANAME,');
  OCPQuery.SQL.Add('    SFORMULA => :SFORMULA);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// BP_AL_INTERFACE.ADDFORMULA2LIBRARY
function TBpAlInterface.Addformula2library(AIdformula: Double; AIdlibrary: Double): string;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otString);
  OCPQuery.DeclareVariable('IDFORMULA', otFloat);
  OCPQuery.SetVariable('IDFORMULA', AIdformula);
  OCPQuery.DeclareVariable('IDLIBRARY', otFloat);
  OCPQuery.SetVariable('IDLIBRARY', AIdlibrary);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "BP_AL_INTERFACE"."ADDFORMULA2LIBRARY"(');
  OCPQuery.SQL.Add('    IDFORMULA => :IDFORMULA,');
  OCPQuery.SQL.Add('    IDLIBRARY => :IDLIBRARY);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// BP_AL_INTERFACE.ADDLIBRARY
function TBpAlInterface.Addlibrary(const ASlibraryname: string): Double;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otFloat);
  OCPQuery.DeclareVariable('SLIBRARYNAME', otString);
  OCPQuery.SetVariable('SLIBRARYNAME', ASlibraryname);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "BP_AL_INTERFACE"."ADDLIBRARY"(SLIBRARYNAME => :SLIBRARYNAME);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// BP_AL_INTERFACE.ADDLIBRARY2JOB
function TBpAlInterface.Addlibrary2job(ANtaskclass: Double; ANlibclass: Double; 
  ANorder: Double): string;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otString);
  OCPQuery.DeclareVariable('NTASKCLASS', otFloat);
  OCPQuery.SetVariable('NTASKCLASS', ANtaskclass);
  OCPQuery.DeclareVariable('NLIBCLASS', otFloat);
  OCPQuery.SetVariable('NLIBCLASS', ANlibclass);
  OCPQuery.DeclareVariable('NORDER', otFloat);
  OCPQuery.SetVariable('NORDER', ANorder);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "BP_AL_INTERFACE"."ADDLIBRARY2JOB"(');
  OCPQuery.SQL.Add('    NTASKCLASS => :NTASKCLASS,');
  OCPQuery.SQL.Add('    NLIBCLASS => :NLIBCLASS,');
  OCPQuery.SQL.Add('    NORDER => :NORDER);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// BP_AL_INTERFACE.ADDREPORT
function TBpAlInterface.Addreport(ANtasktype: Double; const ASlabel: string): Double;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otFloat);
  OCPQuery.DeclareVariable('NTASKTYPE', otFloat);
  OCPQuery.SetVariable('NTASKTYPE', ANtasktype);
  OCPQuery.DeclareVariable('SLABEL', otString);
  OCPQuery.SetVariable('SLABEL', ASlabel);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "BP_AL_INTERFACE"."ADDREPORT"(');
  OCPQuery.SQL.Add('    NTASKTYPE => :NTASKTYPE,');
  OCPQuery.SQL.Add('    SLABEL => :SLABEL);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// BP_AL_INTERFACE.ADDTABLEDESC
function TBpAlInterface.Addtabledesc(const AStablename: string; 
  const AStabledesc: string): Double;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otFloat);
  OCPQuery.DeclareVariable('STABLENAME', otString);
  OCPQuery.SetVariable('STABLENAME', AStablename);
  OCPQuery.DeclareVariable('STABLEDESC', otString);
  OCPQuery.SetVariable('STABLEDESC', AStabledesc);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "BP_AL_INTERFACE"."ADDTABLEDESC"(');
  OCPQuery.SQL.Add('    STABLENAME => :STABLENAME,');
  OCPQuery.SQL.Add('    STABLEDESC => :STABLEDESC);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// BP_AL_INTERFACE.ADDTASKATTR
function TBpAlInterface.Addtaskattr(ANtaskclass: Double; ANtaskattrtype: Double; 
  ANaorder: Double; ANobj: Double; const ASvalue: string; 
  const AScomparewith: string): string;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otString);
  OCPQuery.DeclareVariable('NTASKCLASS', otFloat);
  OCPQuery.SetVariable('NTASKCLASS', ANtaskclass);
  OCPQuery.DeclareVariable('NTASKATTRTYPE', otFloat);
  OCPQuery.SetVariable('NTASKATTRTYPE', ANtaskattrtype);
  OCPQuery.DeclareVariable('NAORDER', otFloat);
  OCPQuery.SetVariable('NAORDER', ANaorder);
  OCPQuery.DeclareVariable('NOBJ', otFloat);
  OCPQuery.SetVariable('NOBJ', ANobj);
  OCPQuery.DeclareVariable('SVALUE', otString);
  OCPQuery.SetVariable('SVALUE', ASvalue);
  OCPQuery.DeclareVariable('SCOMPAREWITH', otString);
  OCPQuery.SetVariable('SCOMPAREWITH', AScomparewith);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "BP_AL_INTERFACE"."ADDTASKATTR"(');
  OCPQuery.SQL.Add('    NTASKCLASS => :NTASKCLASS,');
  OCPQuery.SQL.Add('    NTASKATTRTYPE => :NTASKATTRTYPE,');
  OCPQuery.SQL.Add('    NAORDER => :NAORDER,');
  OCPQuery.SQL.Add('    NOBJ => :NOBJ,');
  OCPQuery.SQL.Add('    SVALUE => :SVALUE,');
  OCPQuery.SQL.Add('    SCOMPAREWITH => :SCOMPAREWITH);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// BP_AL_INTERFACE.ADDTASKATTRTYPE
function TBpAlInterface.Addtaskattrtype(ANclass: Double; const ASlabel: string): string;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otString);
  OCPQuery.DeclareVariable('NCLASS', otFloat);
  OCPQuery.SetVariable('NCLASS', ANclass);
  OCPQuery.DeclareVariable('SLABEL', otString);
  OCPQuery.SetVariable('SLABEL', ASlabel);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "BP_AL_INTERFACE"."ADDTASKATTRTYPE"(');
  OCPQuery.SQL.Add('    NCLASS => :NCLASS,');
  OCPQuery.SQL.Add('    SLABEL => :SLABEL);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// BP_AL_INTERFACE.CHANGEFORMULAOPERATION
function TBpAlInterface.Changeformulaoperation(AAidformula: Double; 
  AAidlibrary: Double; const AAoperation: string): string;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otString);
  OCPQuery.DeclareVariable('AIDFORMULA', otFloat);
  OCPQuery.SetVariable('AIDFORMULA', AAidformula);
  OCPQuery.DeclareVariable('AIDLIBRARY', otFloat);
  OCPQuery.SetVariable('AIDLIBRARY', AAidlibrary);
  OCPQuery.DeclareVariable('AOPERATION', otString);
  OCPQuery.SetVariable('AOPERATION', AAoperation);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "BP_AL_INTERFACE"."CHANGEFORMULAOPERATION"(');
  OCPQuery.SQL.Add('    AIDFORMULA => :AIDFORMULA,');
  OCPQuery.SQL.Add('    AIDLIBRARY => :AIDLIBRARY,');
  OCPQuery.SQL.Add('    AOPERATION => :AOPERATION);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// BP_AL_INTERFACE.DELETECOLUMN
function TBpAlInterface.Deletecolumn(ANcolumnclass: Double): string;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otString);
  OCPQuery.DeclareVariable('NCOLUMNCLASS', otFloat);
  OCPQuery.SetVariable('NCOLUMNCLASS', ANcolumnclass);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "BP_AL_INTERFACE"."DELETECOLUMN"(NCOLUMNCLASS => :NCOLUMNCLASS);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// BP_AL_INTERFACE.DELETEFORMULA
function TBpAlInterface.Deleteformula(AIdformula: Double): string;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otString);
  OCPQuery.DeclareVariable('IDFORMULA', otFloat);
  OCPQuery.SetVariable('IDFORMULA', AIdformula);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "BP_AL_INTERFACE"."DELETEFORMULA"(IDFORMULA => :IDFORMULA);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// BP_AL_INTERFACE.DELETEFORMULAANYWAY
function TBpAlInterface.Deleteformulaanyway(AIdformula: Double): string;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otString);
  OCPQuery.DeclareVariable('IDFORMULA', otFloat);
  OCPQuery.SetVariable('IDFORMULA', AIdformula);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "BP_AL_INTERFACE"."DELETEFORMULAANYWAY"(IDFORMULA => :IDFORMULA);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// BP_AL_INTERFACE.DELETEFORMULAFROMLIBRARY
function TBpAlInterface.Deleteformulafromlibrary(AIdformula: Double; 
  AIdlibrary: Double): string;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otString);
  OCPQuery.DeclareVariable('IDFORMULA', otFloat);
  OCPQuery.SetVariable('IDFORMULA', AIdformula);
  OCPQuery.DeclareVariable('IDLIBRARY', otFloat);
  OCPQuery.SetVariable('IDLIBRARY', AIdlibrary);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "BP_AL_INTERFACE"."DELETEFORMULAFROMLIBRARY"(');
  OCPQuery.SQL.Add('    IDFORMULA => :IDFORMULA,');
  OCPQuery.SQL.Add('    IDLIBRARY => :IDLIBRARY);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// BP_AL_INTERFACE.DELETELIBRARY
function TBpAlInterface.Deletelibrary(ANclass: Double): string;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otString);
  OCPQuery.DeclareVariable('NCLASS', otFloat);
  OCPQuery.SetVariable('NCLASS', ANclass);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "BP_AL_INTERFACE"."DELETELIBRARY"(NCLASS => :NCLASS);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// BP_AL_INTERFACE.DELETELIBRARYSFROMJOB
function TBpAlInterface.Deletelibrarysfromjob(ANtaskclass: Double): string;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otString);
  OCPQuery.DeclareVariable('NTASKCLASS', otFloat);
  OCPQuery.SetVariable('NTASKCLASS', ANtaskclass);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "BP_AL_INTERFACE"."DELETELIBRARYSFROMJOB"(NTASKCLASS => :NTASKCLASS);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// BP_AL_INTERFACE.DELETEREPORT
function TBpAlInterface.Deletereport(ANtaskclass: Double): string;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otString);
  OCPQuery.DeclareVariable('NTASKCLASS', otFloat);
  OCPQuery.SetVariable('NTASKCLASS', ANtaskclass);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "BP_AL_INTERFACE"."DELETEREPORT"(NTASKCLASS => :NTASKCLASS);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// BP_AL_INTERFACE.DELETETASKATTRS
function TBpAlInterface.Deletetaskattrs(ANtaskclass: Double): string;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otString);
  OCPQuery.DeclareVariable('NTASKCLASS', otFloat);
  OCPQuery.SetVariable('NTASKCLASS', ANtaskclass);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "BP_AL_INTERFACE"."DELETETASKATTRS"(NTASKCLASS => :NTASKCLASS);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// BP_AL_INTERFACE.EDITFORMULA
function TBpAlInterface.Editformula(ANclass: Double; const ASformula: string): string;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otString);
  OCPQuery.DeclareVariable('NCLASS', otFloat);
  OCPQuery.SetVariable('NCLASS', ANclass);
  OCPQuery.DeclareVariable('SFORMULA', otString);
  OCPQuery.SetVariable('SFORMULA', ASformula);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "BP_AL_INTERFACE"."EDITFORMULA"(');
  OCPQuery.SQL.Add('    NCLASS => :NCLASS,');
  OCPQuery.SQL.Add('    SFORMULA => :SFORMULA);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// BP_AL_INTERFACE.EDITLIBRARY
function TBpAlInterface.Editlibrary(ANclass: Double; const ASlibraryname: string): string;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otString);
  OCPQuery.DeclareVariable('NCLASS', otFloat);
  OCPQuery.SetVariable('NCLASS', ANclass);
  OCPQuery.DeclareVariable('SLIBRARYNAME', otString);
  OCPQuery.SetVariable('SLIBRARYNAME', ASlibraryname);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "BP_AL_INTERFACE"."EDITLIBRARY"(');
  OCPQuery.SQL.Add('    NCLASS => :NCLASS,');
  OCPQuery.SQL.Add('    SLIBRARYNAME => :SLIBRARYNAME);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// BP_AL_INTERFACE.EDITREPORT
function TBpAlInterface.Editreport(ANtaskclass: Double; const ASlabel: string): string;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otString);
  OCPQuery.DeclareVariable('NTASKCLASS', otFloat);
  OCPQuery.SetVariable('NTASKCLASS', ANtaskclass);
  OCPQuery.DeclareVariable('SLABEL', otString);
  OCPQuery.SetVariable('SLABEL', ASlabel);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "BP_AL_INTERFACE"."EDITREPORT"(');
  OCPQuery.SQL.Add('    NTASKCLASS => :NTASKCLASS,');
  OCPQuery.SQL.Add('    SLABEL => :SLABEL);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// BP_AL_INTERFACE.TOKENIZE
procedure TBpAlInterface.Tokenize(const AS1: string; const ASdelim: string; 
  var AAtable: TPLSQLTable);
begin
  GetQuery;
  OCPQuery.DeclareVariable('S', otString);
  OCPQuery.SetVariable('S', AS1);
  OCPQuery.DeclareVariable('SDELIM', otString);
  OCPQuery.SetVariable('SDELIM', ASdelim);
  OCPQuery.DeclareVariable('ATABLE', otString);
  OCPQuery.DimPLSQLTable('ATABLE', AAtable.TableSize, AAtable.StringSize);
  OCPQuery.SetVariable('ATABLE', AAtable.ValueArray);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  "BP_AL_INTERFACE"."TOKENIZE"(');
  OCPQuery.SQL.Add('    S => :S,');
  OCPQuery.SQL.Add('    SDELIM => :SDELIM,');
  OCPQuery.SQL.Add('    ATABLE => :ATABLE);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  AAtable.ValueArray := OCPQuery.GetVariable('ATABLE');
end;

// BP_AL_INTERFACE.TRANSLATECOLUMNLIST
procedure TBpAlInterface.Translatecolumnlist(const AStablename: string; 
  AAtable: TPLSQLTable; var AAcolumnnametable: TPLSQLTable; 
  ANcolumntype: Double);
begin
  GetQuery;
  OCPQuery.DeclareVariable('STABLENAME', otString);
  OCPQuery.SetVariable('STABLENAME', AStablename);
  OCPQuery.DeclareVariable('ATABLE', otString);
  OCPQuery.DimPLSQLTable('ATABLE', AAtable.TableSize, AAtable.StringSize);
  OCPQuery.SetVariable('ATABLE', AAtable.ValueArray);
  OCPQuery.DeclareVariable('ACOLUMNNAMETABLE', otString);
  OCPQuery.DimPLSQLTable('ACOLUMNNAMETABLE', AAcolumnnametable.TableSize, AAcolumnnametable.StringSize);
  OCPQuery.SetVariable('ACOLUMNNAMETABLE', AAcolumnnametable.ValueArray);
  OCPQuery.DeclareVariable('NCOLUMNTYPE', otFloat);
  OCPQuery.SetVariable('NCOLUMNTYPE', ANcolumntype);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  "BP_AL_INTERFACE"."TRANSLATECOLUMNLIST"(');
  OCPQuery.SQL.Add('    STABLENAME => :STABLENAME,');
  OCPQuery.SQL.Add('    ATABLE => :ATABLE,');
  OCPQuery.SQL.Add('    ACOLUMNNAMETABLE => :ACOLUMNNAMETABLE,');
  OCPQuery.SQL.Add('    NCOLUMNTYPE => :NCOLUMNTYPE);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  AAcolumnnametable.ValueArray := OCPQuery.GetVariable('ACOLUMNNAMETABLE');
end;

end.

