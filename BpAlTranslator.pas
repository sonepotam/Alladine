unit BpAlTranslator;

// Oracle Package Wizard 1.0.3
// File BpAlTranslator.pas generated by tseit on 04.02.03 15:29:03
// This unit contains interface objects for oracle package OLAP.BP_AL_TRANSLATOR
// WARNING: Modifications made to this file will be lost after regeneration!

interface

uses Classes, SysUtils, Oracle;

type
(*
package bp_al_translator is

   endl varChar2( 2) := chr( 13) || chr( 10);

   subtype TOperation is varChar2(1);
   subtype TSummaType is varChar2(5);

   ---
   --- операции доступные внутри формулы
   ---
   opPlus  TOperation := '+';
   opMinus TOperation := '-';

   ---
   --- типы суммы
   ---
   tsRestVal TSummaType := 'D';
   tsRestRub TSummaType := 'DR';
   tsOBDVal  TSummaType := 'OBD';
   tsOBDRub  TSummaType := 'OBDR';
   tsOBKVal  TSummaType := 'OBK';
   tsOBKRub  TSummaType := 'OBKR';



   ---
   --- описатель одного счета в формуле
   ---
   type
     TFormulaToken is record(
	    sAccount   varChar2( 32),
	    sOperation TOperation,
	    sSummaType TSummaType
   );
   ---
   --- таблица со счетами
   ---
   type
     TFormulaList is table of TFormulaToken index by binary_integer;

   ---
   --- список разделителей
   ---
   type
     TDelimList is table of TOperation index by binary_integer;
   ---
   --- список сумм
   ---
   type
     TSummaList is table of TSummaType index by binary_integer;


  DelimList TDelimList;  -- список операций
  SummaList TSummaList;  -- список типов суммы



  ---
  --- разбор формулы
  --- 1 формула оттраснлирована/ 0 - оракловые ошибки
  ---
  function TranslateFormula( sFormula in varChar2, tbFormula in out TFormulaList) return varchar2;

  ---
  --- сборка формулы из библиотеки.
  --- Возвращает строку с формулой
  function CreateRealFormula( nLibClass in number) return varChar2;

  ---
  --- проверка библиотеки
  --- Возвращает строку с описанием ошибки, null - если ОК
  ---
  function CheckLibrary( nLibClass in number) return varChar2;

  ---
  --- проверка формулы
  --- Возвращает строку с описанием ошибки, null - если ОК
  ---
  function CheckFormula( sFormula in varChar2) return varChar2;

  ---
  --- набивка временной таблицы
  ---
  procedure UpdateGTT( nOrder in number, tbFormula in TFormulaList);

  ---
  --- проверка библиотеки при присоединении к кубику
  ---
  function CheckLibraryByCube( nLibClass in number, nCubeID number) return varChar2;

end;
*)
  TBpAlTranslator = class(TOracleCustomPackage)
  public
    function  Checkformula(const ASformula: string): string;
    function  Checklibrary(ANlibclass: Double): string;
    function  Checklibrarybycube(ANlibclass: Double; ANcubeid: Double): string;
    function  Createrealformula(ANlibclass: Double): string;
  published
    property Name;
    property Session;
    property Cursor;
  end;

var
  DefaultPLSQLTableSize: Integer = 100; // Default size of a PL/SQL Table

implementation

// BP_AL_TRANSLATOR.CHECKFORMULA
function TBpAlTranslator.Checkformula(const ASformula: string): string;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otString);
  OCPQuery.DeclareVariable('SFORMULA', otString);
  OCPQuery.SetVariable('SFORMULA', ASformula);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "BP_AL_TRANSLATOR"."CHECKFORMULA"(SFORMULA => :SFORMULA);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// BP_AL_TRANSLATOR.CHECKLIBRARY
function TBpAlTranslator.Checklibrary(ANlibclass: Double): string;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otString);
  OCPQuery.DeclareVariable('NLIBCLASS', otFloat);
  OCPQuery.SetVariable('NLIBCLASS', ANlibclass);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "BP_AL_TRANSLATOR"."CHECKLIBRARY"(NLIBCLASS => :NLIBCLASS);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// BP_AL_TRANSLATOR.CHECKLIBRARYBYCUBE
function TBpAlTranslator.Checklibrarybycube(ANlibclass: Double; ANcubeid: Double): string;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otString);
  OCPQuery.DeclareVariable('NLIBCLASS', otFloat);
  OCPQuery.SetVariable('NLIBCLASS', ANlibclass);
  OCPQuery.DeclareVariable('NCUBEID', otFloat);
  OCPQuery.SetVariable('NCUBEID', ANcubeid);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "BP_AL_TRANSLATOR"."CHECKLIBRARYBYCUBE"(');
  OCPQuery.SQL.Add('    NLIBCLASS => :NLIBCLASS,');
  OCPQuery.SQL.Add('    NCUBEID => :NCUBEID);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

// BP_AL_TRANSLATOR.CREATEREALFORMULA
function TBpAlTranslator.Createrealformula(ANlibclass: Double): string;
begin
  GetQuery;
  OCPQuery.DeclareVariable('function_result', otString);
  OCPQuery.DeclareVariable('NLIBCLASS', otFloat);
  OCPQuery.SetVariable('NLIBCLASS', ANlibclass);
  OCPQuery.SQL.Add('begin');
  OCPQuery.SQL.Add('  :function_result := "BP_AL_TRANSLATOR"."CREATEREALFORMULA"(NLIBCLASS => :NLIBCLASS);');
  OCPQuery.SQL.Add('end;');
  OCPQuery.Execute;
  Result := ConvertVariant(OCPQuery.GetVariable('function_result'));
end;

end.
